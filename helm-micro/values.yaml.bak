---
# Default values for microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  replicaCount: 1
  environment:
   # list of key: value
   # GLOBAL1: value

## Set default image, imageTag, and imagePullPolicy.
## ref: https://hub.docker.com/r/apache/nifi/
##


image: damilare77/auth
imageConfig:
  repository:
  tag: "latest"
  pullPolicy: IfNotPresent

#command: ['echo pre-install Job Pod is Running']

replicaCount: 1

# command: ["/bin/sh","-c"]
# args: ["echo 'consuming a message'; sleep 5"]

nameOverride: deployment
fullnameOverride: ""

## Optionally specify an imagePullSecret.
## Secret must be manually created in the namespace.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
#imagePullSecrets: myRegistrKeySecretName
#imagePullSecrets: ""

# serviceAccount: 

# Annotation for the Deployment
annotations: {}

#ARGS: both works
#args: [
#    -p,
#    "4222",
#    -m,
#    "8222",
#    -hbi,
#    5s,
#    -hbt,
#    5s,
#    -hbf,
#    "2",
#    -SD,
#    -cid,
#    ticketing,
#]
args:
#  - "-p"
#  - "4222"
#  - "-m"
#  - "8222"
#  - "-hbi"
#  - "5s"
#  - "-hbt"
#  - "5s"
#  - "-hbf"
#  - "2"
#  - "-SD"
#  - "-cid"
#  - "ticketing"


# List of services
services:
  - name: web
    type: ClusterIP
    annotations: {}
    specs:
      - port: 4222
        targetPort: 4222
        name: client
      - port: 8222
        targetPort: 8222
        name: monitoring
#  - name: nodeport
#    type: NodePort
#    annotations: { }
#    specs:
#      - port: 3000
#        targetPort: 3000
#        name: testing
#targetPort: is the port the container accepts traffic on, 
#port: is the abstracted Service port, which can be any port other pods use to access the Service
#https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#serviceport-v1-core

environment:
#  - name: NATS_URL
#    valueFrom:
#      configMapKeyRef:
#        name: nats-configmap
#        key: nats_url
#  - name: NATS_CLUSTER_ID
#    value: ticketing
#  - name: NATS_CLIENT_ID
#    valueFrom:
#      fieldRef: metadata.name
#  - name: REDIS_HOST
#    valueFrom:
#      configMapKeyRef:
#        name: expiration-redis-configmap
#        key: redis_host
#  - name: MONGO_URI
#    valueFrom:
#      configMapKeyRef:
#        name: tickets-mongo-configmap
#        key: database_url
#  - name: JWT_KEY
#    valueFrom:
#      secretKeyRef:
#        name: jwt-secret
#        key: JWT_KEY
#  - name: STRIPE_KEY
#    valueFrom:
#      secretKeyRef:
#        key: STRIPE_KEY
#        name: stripe-secret


dbConfigMap: true

volumes:
  enabled: false
  pvc:
    enabled: false
    existing_claim:
    name: pvc
    mountPath: /pv
    size: 1G
    class:
    accessModes:
      - ReadWriteOnce

  configMaps:
#    - name: test
#      mountPath: /test
#      data:
#        test.conf: |
#          hello

## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: false
  annotations: {
    kubernetes.io/ingress.class: nginx,
    nginx.ingress.kubernetes.io/use-regex: 'true'
  }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ticketing.dev
      paths:
        - path: /api/payments/?(.*)
          pathType: Prefix
          serviceName: payments-deployment-svc-web
          servicePort: 3000
        - path: /api/users/?(.*)
          pathType: Prefix
          serviceName: auth-deployment-svc-web
          servicePort: 3000
        - path: /api/tickets/?(.*)
          pathType: Prefix
          serviceName: tickets-deployment-svc-web
          servicePort: 3000
        - path: /api/orders/?(.*)
          pathType: Prefix
          serviceName: orders-deployment-svc-web
          servicePort: 3000
        - path: /?(.*)
          pathType: Prefix
          serviceName: client-deployment-svc-web
          servicePort: 3000
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 2
    memory: 2000Mi
  requests:
    cpu: 500m
    memory: 500Mi